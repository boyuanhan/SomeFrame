using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using XmlSpreadSheet = System.Collections.Generic.Dictonary<string,object[]>;

public static class CsvReader{
  
  public static string UrlEncode(string input){
    var ut = new UTF8Encoding();
    return ut.GetString(ut.GeTBytes(input));
  } 
  
  public static XmlSpreadSheet GetCsvTextData(string text1){
    var text = UrlEncode(text1);
    var outPut = new XmlSpreadSheet();
    var lineContext = Regex.Split(text,"\n");
    if(lineContext.Length > 0){
      var names = Regex.Split(lineContex[0],"");
      for(var i = 0;i<names.Length;i++){
        object[] typeContext = new object[lineContex.Length-1];
        for(var j = 0;j<lineContext.Length-1;j++){
          var cellContext = Regex.Split(lineContext[j],",");
          if(cellContext.Length >0){
            typeContext[j] = cellContext[i].Replace("\r","").Trim();
          }
        }
        outPut.Add(names[i].Trim(),typeContext);
      }
    }
    return outPut;
  }
  
  public static int GetKeyNum(string text){
    return Regex.Split(text,"\n").Length-1;
  }
  
  public static List<T> GetRandomList<T>(this List<T> inputList){
    var copyArray = new T[inputList.Count];
    inputList.CopyTo(copyArray);
    var copyList = new List<T>();
    copyList.AddRange(copyArray);
    var outputList = new List<T>();
    var rd = new Random(DataTime.Now.Millisecond);
    while(copyList.Count>0){
      var rdIndex = rd.Next(0,copyList.Count-1);
      var remove = copyList[rdIndex];
      copyList.Remove(remove);
      outputList.Add(remove);
    }
    return outputList;
  }
} 
